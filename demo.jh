
/*
 * This is a microservice e-commerce store sample with Gateway and three microservice applications
 * This uses Istio for native kubernetes service discovery and JWT authentication
 * This also creates the required Kubernetes deployment manifests and Istio routes
 */
 
application {
  config {
    baseName store
    applicationType gateway
    packageName io.polarpoint.store
    serviceDiscoveryType no
    authenticationType jwt
    prodDatabaseType mysql
    cacheProvider hazelcast
    buildTool gradle
    clientFramework react
    useSass true
    testFrameworks [cucumber]
  }
  entities *
}


application {
  config {
    baseName product
    applicationType microservice
    packageName io.polarpoint.product
    serviceDiscoveryType no
    authenticationType jwt
    prodDatabaseType mysql
    cacheProvider hazelcast
    buildTool gradle
    serverPort 8081
  }
  entities Product, Category, SubscriptionGroup, Branch
}

application {
  config {
    baseName invoice
    applicationType microservice
    packageName io.polarpoint.invoice
    serviceDiscoveryType no
    authenticationType jwt
    prodDatabaseType mysql
    buildTool gradle
    serverPort 8082
  }
  entities Invoice, Shipment
}

application {
  config {
    baseName notification
    applicationType microservice
    packageName io.polarpoint.notification
    serviceDiscoveryType no
    authenticationType jwt
    databaseType mysql
    cacheProvider no
    enableHibernateCache false
    buildTool gradle
    serverPort 8083
  }
  entities Notification
}

/**
 * Entities for Store Gateway
 */

// Branch 
entity Branch {
    branchAddress String required
    FAD String required
    id Int required 
    name String required
}

service Branch with serviceClass

entity SubscriptionGroup {
    id Int required 
    name String required
}

entity Category {
    id Int required 
    deviceRestrictions String required
}

relationship OneToMany {
	SubscriptionGroup{SubscriptionGroup(id) required} to Category
}

relationship OneToMany {
	SubscriptionGroup{SubscriptionGroup(id) required} to  Branch
}

/**
 * Entities for product Catalogue microservice
 */


// Product
entity Product {
	additionalReceipts String required
    client Int required
    name String required
    description String
    paymentType String 
    type ProductType
    vatCode String
}

entity Token {
    clientAccountName String required
    clientId Int
    iin Int  
    itemId Int
    name String 
    svcStart Int
    type String
}

entity ProductCategory {
    name String required
    description String
}

entity Field {
    placedDate Instant required
    status OrderStatus required
    code String required
    invoiceId Long
    customer String required
}


entity Page {
    quantity Integer required min(0)
    totalPrice BigDecimal required min(0)
}

relationship OneToMany {
   Product{token} to Token{token(code) required} 
}

relationship ManyToOne {
	Page{product(name) required} to Product
}

relationship OneToMany {
   Field{page} to Page{order(code) required} ,
   Category{product} to Product{category(name)}
}

service Product, ProductCategory, Field, Page with serviceClass
paginate Product, Field, Page with pagination
microservice Product, Field, Category, Page with product


/**
 * Entities for Basket microservice
 */


// Basket
entity Basket {
    basketId String required
    totalPrice BigDecimal required
    txns BasketEntry
    vatAnalysis VatAnalysis
}

entity BasketEntry {
    basketId String
    canEdit Boolean
    prodictId Int
    quantity Int
    refundable Boolean
    removeable Boolean
    totalPrice BigDecimal required
    transactionId String
    unitPrice BigDecimal
    vatCode String
    vatElement VatAnalysis	
}

entity VatAnalysis {
    vatCode String
    vatElement BigDecimal
}

relationship OneToMany {
    Basket{basketEntry} to BasketEntry{basket(basketId) required},
   Basket{vatAnalysis} to VatAnalysis{basket(basketId)}
}

service Basket, BasketEntry with serviceClass
paginate Basket, BasketEntry with pagination
microservice Basket, BasketEntry with basket



/**
 * Deployments
 */

deployment {
  deploymentType kubernetes
  appsFolders [store, basket, product]
  dockerRepositoryName "image.polarpoint.io"
  serviceDiscoveryType no
  istio true
  kubernetesServiceType Ingress
  kubernetesNamespace dev-hih-01
  ingressDomain "demo.polarpoint.io"
}